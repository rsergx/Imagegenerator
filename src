import React, { useState } from "react";

export default function App() {
  const [prompt, setPrompt] = useState("A cute cat wearing a tiny astronaut helmet");
  const [size, setSize] = useState("512x512");
  const [loading, setLoading] = useState(false);
  const [images, setImages] = useState([]);
  const [error, setError] = useState(null);

  async function handleGenerate(e) {
    e.preventDefault();
    setError(null);
    setLoading(true);
    setImages([]);

    try {
      const res = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt, size }),
      });

      if (!res.ok) throw new Error(await res.text());
      const data = await res.json();

      if (Array.isArray(data.images) && data.images.length) setImages(data.images);
      else if (data.image) setImages([data.image]);
      else throw new Error("No images returned from API");
    } catch (err) {
      setError(err.message || String(err));
    } finally {
      setLoading(false);
    }
  }

  function downloadImage(src, i) {
    const a = document.createElement("a");
    a.href = src;
    a.download = `image-${i + 1}.png`;
    document.body.appendChild(a);
    a.click();
    a.remove();
  }

  return (
    <div className="min-h-screen flex items-start justify-center p-6 bg-slate-50">
      <div className="w-full max-w-3xl bg-white rounded-2xl shadow-md p-6">
        <header className="mb-4">
          <h1 className="text-2xl font-semibold">Image Generator</h1>
          <p className="text-sm text-slate-500">
            Type a prompt, choose size, click generate
          </p>
        </header>

        <form onSubmit={handleGenerate} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Prompt</label>
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              rows={3}
              className="w-full rounded-md border p-3"
            />
          </div>

          <div className="flex gap-3 items-center">
            <label className="text-sm">Size</label>
            <select
              value={size}
              onChange={(e) => setSize(e.target.value)}
              className="rounded-md border p-2"
            >
              <option value="256x256">256 x 256</option>
              <option value="512x512">512 x 512</option>
              <option value="1024x1024">1024 x 1024</option>
            </select>

            <button
              type="submit"
              className="ml-auto inline-flex items-center px-4 py-2 rounded-md bg-indigo-600 text-white"
              disabled={loading}
            >
              {loading ? "Generating..." : "Generate"}
            </button>
          </div>
        </form>

        <div className="mt-6">
          {error && <div className="text-red-600">Error: {error}</div>}

          {images.length === 0 && !loading && (
            <div className="text-sm text-slate-500">
              No images yet. Try a different prompt.
            </div>
          )}

          {images.length > 0 && (
            <div>
              <h2 className="text-lg font-medium mb-3">Results</h2>
              <div className="grid grid-cols-2 gap-4">
                {images.map((src, i) => (
                  <div key={i} className="border rounded-md overflow-hidden">
                    <img
                      src={src}
                      alt={`result-${i}`}
                      className="w-full h-48 object-cover"
                    />
                    <div className="p-2 flex gap-2">
                      <button
                        onClick={() => downloadImage(src, i)}
                        className="flex-1 rounded-md border p-2 text-sm"
                      >
                        Download
                      </button>
                      <a
                        href={src}
                        target="_blank"
                        rel="noreferrer"
                        className="flex-1 rounded-md border p-2 text-sm text-center"
                      >
                        Open
                      </a>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        <footer className="mt-6 text-xs text-slate-400">
          Connect /api/generate to any image model.
        </footer>
      </div>
    </div>
  );
}
